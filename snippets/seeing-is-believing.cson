'.source.ruby':
  'In memory ActiveRecord bootstrap':
    'prefix': 's_arb'
    'body': 'require \'active_record\'\nrequire \'logger\'\n\nActiveRecord::Base.establish_connection adapter: \'sqlite3\', database: \':memory:\'\nActiveRecord::Base.logger = Logger.new \$stdout\nActiveSupport::LogSubscriber.colorize_logging = false\n\nActiveRecord::Schema.define do\n  self.verbose = false\n  \n  create_table :users do |t|\n    t.string :name\n  end\n  \n  create_table :posts do |t|\n    t.string :name\n    t.integer :user_id\n  end\nend\n\nclass User < ActiveRecord::Base\n  has_many :posts\nend\n\nclass Post < ActiveRecord::Base\n  belongs_to :user\nend\n\nuser = User.create! name: \'Josh\'\nuser.posts = [Post.new(name: \'yo ho ho\'), Post.new(name: \'and a bottle of rum\')]\n'
  'Nokogiri':
    'prefix': 's_nokogiri'
    'body': 'require \'nokogiri\'\n\ndoc = Nokogiri::HTML(<<-HTML)\n  <!DOCTYPE html>\n  <html>\n    <head>\n      <meta http-equiv="Content-type" content="text/html; charset=utf-8">\n      <title>OMG</title>\n    </head>\n    <body>\n      <ul>\n        <li>a</li>\n        <li>b</li>\n        <li>c</li>\n      </ul>\n    </body>\n  </html>\nHTML\n\ndoc.at_css(\'ul li:nth-child(2)\')\n   .text\n'
  'Reflection':
    'prefix': 's_reflection'
    'body': 'class User\n  attr_accessor :name, :age\n  def initialize(name, age)\n    self.name, self.age = name, age\n  end\n\n  private\n\n  def reverse_name\n    name.reverse\n  end\nend\n\nuser = User.new \'Mr. Picklecopter\', 45\n\n# ZOMG, ENCAPSULATION VIOLATION!\nuser.instance_variables\nuser.instance_variable_get(:@name)\nuser.instance_variable_set(:@name, \'Mr. Lawyerstein\')\nuser.name\nuser.instance_eval { "#@name is #@age years old" }\nuser.send(:reverse_name)\n\n\n# ZOMG, METHODS!\nuser.methods(false)\n def user.what_time?(a, b=1, *c, &d)\n  \'420\'\nend\n\n# getting lists of methods\nuser.singleton_methods\nuser.methods\nuser.private_methods(false)\n\nUser.instance_methods(false)\nUser.private_instance_methods(false)\n\n# fun shit to do with methods\nuser.method(:reverse_name)\nuser.method(:reverse_name).owner\nuser.method(:puts).owner\nuser.method(:reverse_name).call\nuser.method(:what_time?).parameters\n\nUser.instance_method(:name)\n    .bind(user)\n    .call\n\n# uhm, there was a method like code_location or something, lets find and use that\nuser.method(:reverse_name).methods.grep(/loc/)\nuser.method(:reverse_name).source_location\n\n\n# ZOMG OTHER SHIT!\nuser.class\nuser.class.class\nuser.class.class.class\nUser.ancestors\nObject.constants.grep(/ruby/i)\nObject.included_modules\n'
  'Sinatra':
    'prefix': 's_sinatra'
    'body': 'require \'sinatra/base\'\nrequire \'stringio\'\nrequire \'logger\'\n\nclass MyApp < Sinatra::Base\n  enable :inline_templates\n  get \'/users/:id\' do\n    "User number #{params[:id]} is an uppity know-it-all"\n  end\nend\n\nenv = {"REQUEST_METHOD" => "GET", "PATH_INFO" => "/users/456", "rack.input" => StringIO.new}\nstatus, headers, response = MyApp.call(env)\n\nstatus\nheaders\nresponse\n\n# --- OTHER ENV OPTIONS ---\n# "REQUEST_PATH"              => "/users/123",\n# "REQUEST_URI"               => "/users/789",\n# "SERVER_SOFTWARE"           => "thin 1.5.1 codename Straight Razor",\n# "SERVER_NAME"               => "localhost",\n# "rack.version"              => [1, 0],\n# "rack.errors"               => \\$stderr,\n# "HTTP_VERSION"              => "HTTP/1.1",\n# "HTTP_HOST"                 => "localhost:4567",\n# "HTTP_CONNECTION"           => "keep-alive",\n# "HTTP_CACHE_CONTROL"        => "max-age=0",\n# "HTTP_ACCEPT"               => "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",\n# "HTTP_USER_AGENT"           => "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.71 Safari/537.36",\n# "HTTP_ACCEPT_ENCODING"      => "gzip,deflate,sdch",\n# "HTTP_ACCEPT_LANGUAGE"      => "en-US,en;q=0.8",\n# "HTTP_COOKIE"               => "_session_id=2fca27fa2255b1ebf961610b616fc044; _simple_feed_consumer_session=BAh7B0kiD3Nlc3Npb25faWQGOgZFRkkiJTNiNzg2YWQwMWU1NzU3M2MxM2U1ZTg5ZTRiZDY3MmJiBjsAVEkiEF9jc3JmX3Rva2VuBjsARkkiMXo2Y2YrVkhWRG9NQTVNV3ZoblVRdnRjRzk0eml4NGk1UzhQRFNZVHZhZzA9BjsARg%3D%3D--dc69c96a2374f9ffd646cd2005a63f3b32094f9f; _simple_feed_consumer2_session=BAh7B0kiD3Nlc3Npb25faWQGOgZFRkkiJWE3Nzk2NzlmNjRjZjMwODY1NjdkMWU2OTdjNzYxNzNlBjsAVEkiEF9jc3JmX3Rva2VuBjsARkkiMXEzVmVobmpaYTZzZGRzRytkNUVUUTV4THAxVnlvMXM1Q3hjTko4TXFUMm89BjsARg%3D%3D--fa7da019717903452ef2de05ccf74a9d9547c791; _simple_feed_consumer3_session=BAh7B0kiD3Nlc3Npb25faWQGOgZFRkkiJTcxMjNjMmM5NTRiOGQzY2VkNmE4NTQxZjFhNzhlYWQxBjsAVEkiEF9jc3JmX3Rva2VuBjsARkkiMTRnR1d3bVFoK3phMFdwQ2MyTEFmUGhHRjVTL0ZiblNhWkhvWFRqbllhZ1U9BjsARg%3D%3D--e6ddb60584bc6323181881d71ccc0380222d49f3; _gauges_unique_year=1; _gauges_unique=1; _simple_feed_consumer5_session=BAh7B0kiD3Nlc3Npb25faWQGOgZFRkkiJWE3NTBhOGE3MDcyODljMWNjMzRjNWI1ZWI0ZDNmMjU2BjsAVEkiEF9jc3JmX3Rva2VuBjsARkkiMTB5dW9DRFkvOElpMzFkZk9PTGwrVTBpWnJ1RU4yWnFBdGI3cW0veXl2Q1U9BjsARg%3D%3D--4003910f17682ddb0e25e12c1fb865b16f197e29; _simple_feed_session=BAh7CDoScmV0dXJuX3RvX3VybDA6DHVzZXJfaWRpCEkiD3Nlc3Npb25faWQGOgZFRkkiJWE4ODMyM2Q4ZjgwZTNiNzI5YTA1ZTA5ZTFjYjg2ODI1BjsHVA%3D%3D--caf9d70c54a570a5bf8f7e9f939ca5bca1989d9e; _staffing_service_session=BAh7CEkiD3Nlc3Npb25faWQGOgZFRkkiJWM1NzFiODc5MjJlMzhjYzA4NjM1ZDNlMGZmZTEwOWI3BjsAVEkiEF9jc3JmX3Rva2VuBjsARkkiMUYvNldXOXkvKzlRMHNLb3BjcGt3UXlRN1BNT0oyL3cyRDdhSVhoaTlSWUU9BjsARkkiEGNyZWRlbnRpYWxzBjsARkM6F09tbmlBdXRoOjpBdXRoSGFzaHsJSSIKdG9rZW4GOwBGSSI5eWEyOS5BSEVTNlpUUTJZcEhSdjhnaGVoTUV6S043Nk42MEMwTm0waXJHRzFpMWNEbndVawY7AEZJIhJyZWZyZXNoX3Rva2VuBjsARkkiMjEvLURDWkx0T2ljSzUtQ3lkVjZfNEVDLWg0djlKVy15V1hxRlB3T053cks1WQY7AEZJIg9leHBpcmVzX2F0BjsARmwrB5fYflFJIgxleHBpcmVzBjsARlQ%3D--85f3a935ed10e4e4237ee72b236f901010222f71",\n# "GATEWAY_INTERFACE"         => "CGI/1.2",\n# "SERVER_PORT"               => "4567",\n# "QUERY_STRING"              => "",\n# "SERVER_PROTOCOL"           => "HTTP/1.1",\n# "rack.url_scheme"           => "http",\n# "SCRIPT_NAME"               => "",\n# "REMOTE_ADDR"               => "127.0.0.1",\n# "sinatra.commonlogger"      => true,\n# "rack.logger"               => Logger.new(\\$stdout),\n# "rack.request.query_string" => "",\n# "rack.request.query_hash"   => {}'
