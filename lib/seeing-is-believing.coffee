# http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback
spawn = require('child_process').spawn

# https://atom.io/docs/api/v0.189.0/CompositeDisposable
# An object that aggregates multiple Disposable instances together into a single disposable, so they can all be disposed as a group.
{CompositeDisposable} = require 'atom'

# might be cool to use the -j option to split into a second or third pane
# would be like:
# if there are multiple panes open that SIB did not create
#   then just run with magic comment style
# if there is only one pane that SIB did not open
#   run with --json flag
#   find or open 2nd pane to the right, add metadata to it so we know it is "sib-results"
#   print results there
#   if there is stdout/stderr
#     find or open 3rd & 4th panes under them, print results there
#   if there is not stderr or stdout
#     close the stdout / stderr panes if they are open

module.exports = SeeingIsBelieving =
  config:
    sibCommand:
      title: 'Seeing is believing command'
      description: '
        This is the absolute path to your `seeing_is_believing` command. You may need to run
        `which seeing_is_believing` or `rbenv which seeing_is_believing` to find this. Examples:
        `/home/USERNAME/.gem/ruby/2.3.0/bin/seeing_is_believing` or `/usr/local/bin/bundle exec seeing_is_believing`.
      '
      type: 'string'
      default: 'seeing_is_believing'
    flags:
      title: 'Flags'
      description: 'You can get a full list of flags by running seeing_is_believing --help'
      type: 'array'
      default: ['--alignment-strategy', 'chunk',
                '--number-of-captures', '300',
                '--line-length',        '1000',
                '--timeout',            '12']
      items:
        type: 'string'
    verbose:
      title: 'Verbose'
      description: 'Show console.log messages'
      type: 'boolean'
      default: 'false'

  activate: ->
    @verbose = atom.config.get('seeing-is-believing.verbose')
    atom.config.onDidChange 'seeing-is-believing.verbose', ({newValue, oldValue}) =>
      @verbose = newValue
    @subscriptions = new CompositeDisposable
    @subscriptions.add atom.commands.add 'atom-workspace',
      'seeing-is-believing:annotate-document':       => @annotateDocument(),
      'seeing-is-believing:annotate-magic-comments': => @annotateMagicComments(),
      'seeing-is-believing:remove-annotations':      => @removeAnnotations()

  deactivate: ->
    @subscriptions.dispose()

  invokeSib: (additionalArgs) ->
    editor        = atom.workspace.getActivePaneItem()
    crntBody      = editor.getText()
    fileName      = editor.getPath()

    mainCommand   = atom.config.get('seeing-is-believing.sibCommand')
    args          = atom.config.get('seeing-is-believing.flags')
    args.concat(additionalArgs) if additionalArgs?
    # if file is saved, run as that file (otherwise uses a tempfile)
    args.push('--as', fileName) if fileName

    newBody       = ""
    capturedError = ""

    if @verbose
      console.log('Seeing is Believing:')
      console.log('command: ' + mainCommand + ' ' + args.join(' '))
    sib = spawn(mainCommand, args)

    sib.stdout.on 'data', (output) ->
      newBody += output

    sib.stderr.on 'data', (output) ->
      capturedError += output
      console.error('Seeing is Believing stderr:' + output)

    sib.on 'close', (code) =>
      console.log('Seeing is Believing closed with code ' + code) if @verbose
      # CoffeeScript expands `!=` to `!==`
      #   $ coffee --compile --bare --print --eval 'a != b'
      #   // Generated by CoffeeScript 1.9.1
      #   a !== b;
      # Why using indexOf? Considerations and thoughts can be seen at:
      #   https://github.com/JoshCheek/atom-seeing-is-believing/pull/15
      if capturedError.indexOf('LoadError') != -1
        atom.notifications.addError('Error starting seeing_is_believing',
                    {
                      detail: """It looks like the Seeing is Believing gem hasn't been installed, run:
                        `gem install seeing_is_believing`
                        to do so, then make sure it worked with:
                        `seeing_is_believing --version`
                        If it should be installed, check logs to see what was executed:
                        (Option+Command+I)/(Ctrl+Shift+I)""",
                      dismissable: true
                    }
                  )
      else if code == 2 # nondisplayable error
        atom.notifications.addError('Error starting seeing_is_believing',
                    {detail: "exec error: #{capturedError}", dismissable: true}
                  )
      else
        @withoutMovingScreenOrCursor editor, -> editor.setText(newBody + capturedError)

    sib.stdin.write(crntBody)
    sib.stdin.end()

  inEditor: ->
    # can't figure out a good way to ask it what it is, so just asking if I can do all the stuff I want with it
    editor = atom.workspace.getActivePaneItem()
    editor?                           &&
      editor.displayBuffer?           &&
      editor.getText?                 &&
      editor.setText?                 &&
      editor.getPath?                 &&
      editor.getCursorScreenPosition? &&
      editor.setCursorScreenPosition?

  annotateDocument: ->
    @invokeSib() if @inEditor?()

  annotateMagicComments: ->
    if @inEditor?()
      @invokeSib ['--xmpfilter-style']

  removeAnnotations: ->
    if @inEditor?()
      @invokeSib ['--clean']

  # helpers

  merge: (leftObj, rightObj) ->
    mergedObj = {}
    for key, value of leftObj
      mergedObj[key] = value
    for key, value of rightObj
      mergedObj[key] = value
    mergedObj

  withoutMovingScreenOrCursor: (editor, f) ->
    cursor        = editor.getCursorBufferPosition()
    scrollTop     = editor.getScrollTop()
    scrollLeft    = editor.getScrollLeft()
    f()
    editor.setCursorBufferPosition(cursor)
    editor.setScrollLeft(scrollLeft)
    editor.setScrollTop(scrollTop)
